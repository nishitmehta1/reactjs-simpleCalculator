{"version":3,"sources":["components/Button.js","components/Input.js","components/ClearButton.js","App.js","serviceWorker.js","index.js"],"names":["Button","isNumber","val","isNaN","_this2","this","react_default","a","createElement","className","concat","props","children","onClick","handleClick","Component","Input","ClearButton","_this","handleClear","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","addToInput","setState","input","state","addZeroToInput","addDecimal","indexOf","clearInput","add","previousNumber","operator","sub","mul","div","solve","currentNumber","parseFloat","src_components_Input","src_components_Button","src_components_ClearButton","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f55881ca.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Button.css';\r\n\r\nclass Button extends Component {\r\n\tisNumber = val => {\r\n\t\treturn !isNaN(val) || val === \".\" || val === \"=\";\r\n\t}\r\n\trender() {\r\n\treturn (\r\n\t  <div className={`Button ${this.isNumber(this.props.children)?\"\":\"operator\"}`} onClick={()=> this.props.handleClick(this.props.children)}>\r\n\t  \t{this.props.children}\r\n\t  </div>\r\n\t);\r\n}\r\n}\r\n\r\nexport default Button;","import React, { Component } from 'react';\r\nimport './Input.css';\r\n\r\nclass Input extends Component {\r\n\trender() {\r\n\treturn (\r\n\t  <div className=\"Input\">\r\n\t\t{this.props.children}\r\n\t  </div>\r\n\t);\r\n}\r\n}\r\n\r\nexport default Input;","import React, { Component } from 'react';\r\nimport './ClearButton.css';\r\n\r\nclass ClearButton extends Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t  <div className=\"ClearButton\" onClick = {() => this.props.handleClear()}>\r\n\t\t  \t{this.props.children}\r\n\t\t  </div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default ClearButton;","import React, { Component } from 'react';\nimport './App.css';\nimport Button from './components/Button.js'\nimport Input from './components/Input.js';\nimport ClearButton from './components/ClearButton.js';\n\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      input : \"\",\n      previousNumber : \"\",\n      currentNumber : \"\",\n      operator : \"\"\n    }\n  }\n  addToInput = val => {\n    this.setState({\n      input: this.state.input + val\n    })\n  };\n\n  addZeroToInput = val => {\n    if (this.state.input !== \"\"){\n      this.setState({\n        input: this.state.input + val\n      })\n    }\n  };\n  addDecimal = val => {\n    if(this.state.input.indexOf(\".\")===-1){\n      this.setState({\n        input: this.state.input + val\n      })\n    }\n  };\n  clearInput = () => {\n    this.setState({\n      input: \"\"\n    })\n  };\n\n  add = () => {\n    this.state.previousNumber = this.state.input;\n    this.setState({input: \"\"})\n    this.state.operator = \"plus\";\n  };\n  \n  sub = () => {\n    this.state.previousNumber = this.state.input;\n    this.setState({input: \"\"})\n    this.state.operator = \"sub\";\n  };\n  mul = () => {\n    this.state.previousNumber = this.state.input;\n    this.setState({input: \"\"})\n    this.state.operator = \"mul\";\n  };\n  div = () => {\n    this.state.previousNumber = this.state.input;\n    this.setState({input: \"\"})\n    this.state.operator = \"div\";\n  };\n\n  solve = () => {\n    this.state.currentNumber = this.state.input;\n    if (this.state.operator == \"plus\") {\n      this.setState({\n        input: parseFloat(this.state.previousNumber) + parseFloat(this.state.currentNumber)\n      });\n    }\n    else if (this.state.operator == \"sub\") {\n      this.setState({\n        input: parseFloat(this.state.previousNumber) - parseFloat(this.state.currentNumber)\n      });\n    }\n    else if (this.state.operator == \"mul\") {\n      this.setState({\n        input: parseFloat(this.state.previousNumber) * parseFloat(this.state.currentNumber)\n      });\n    }\n    else if (this.state.operator == \"div\") {\n      this.setState({\n        input: parseFloat(this.state.previousNumber) / parseFloat(this.state.currentNumber)\n      });\n    }\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"calc-wrapper\">\n          <div className=\"row\">\n              <Input>{this.state.input}</Input>\n          </div>\n          <div className=\"row\">\n            <Button handleClick={this.addToInput}>7</Button>\n            <Button handleClick={this.addToInput}>8</Button>\n            <Button handleClick={this.addToInput}>9</Button>\n            <Button handleClick={this.div}>/</Button>\n          </div>\n          <div className=\"row\">\n            <Button handleClick={this.addToInput}>4</Button>\n            <Button handleClick={this.addToInput}>5</Button>\n            <Button handleClick={this.addToInput}>6</Button>\n            <Button handleClick={this.mul}>*</Button>\n          </div>\n          <div className=\"row\">\n            <Button handleClick={this.addToInput}>1</Button>\n            <Button handleClick={this.addToInput}>2</Button>\n            <Button handleClick={this.addToInput}>3</Button>\n            <Button handleClick={this.add}>+</Button>\n          </div>\n          <div className=\"row\">\n            <Button handleClick={this.addDecimal}>.</Button>\n            <Button handleClick={this.addZeroToInput}>0</Button>\n            <Button handleClick={this.solve}>=</Button>\n            <Button handleClick={this.sub}>-</Button>\n          </div>\n          <div className=\"row\">\n            <ClearButton handleClear = {this.clearInput}>Clear</ClearButton>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}